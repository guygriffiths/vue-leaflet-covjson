function interpolate(c1, c2, fracFromC2) {
	let fracFromC1 = 1 - fracFromC2
	return {
		r: Math.round(fracFromC1 * c1.r + fracFromC2 * c2.r),
		g: Math.round(fracFromC1 * c1.g + fracFromC2 * c2.g),
		b: Math.round(fracFromC1 * c1.b + fracFromC2 * c2.b),
	}
}

const plasmaData = [
	{ r: 13, g: 8, b: 135 },
	{ r: 27, g: 6, b: 141 },
	{ r: 38, g: 5, b: 145 },
	{ r: 47, g: 5, b: 150 },
	{ r: 56, g: 4, b: 154 },
	{ r: 67, g: 3, b: 158 },
	{ r: 75, g: 3, b: 161 },
	{ r: 83, g: 2, b: 163 },
	{ r: 91, g: 1, b: 165 },
	{ r: 100, g: 0, b: 167 },
	{ r: 108, g: 0, b: 168 },
	{ r: 116, g: 1, b: 168 },
	{ r: 123, g: 2, b: 168 },
	{ r: 131, g: 5, b: 167 },
	{ r: 139, g: 10, b: 165 },
	{ r: 146, g: 15, b: 163 },
	{ r: 153, g: 21, b: 159 },
	{ r: 160, g: 26, b: 156 },
	{ r: 167, g: 33, b: 151 },
	{ r: 173, g: 39, b: 147 },
	{ r: 179, g: 44, b: 142 },
	{ r: 184, g: 50, b: 137 },
	{ r: 190, g: 56, b: 133 },
	{ r: 196, g: 62, b: 127 },
	{ r: 201, g: 68, b: 122 },
	{ r: 205, g: 74, b: 118 },
	{ r: 210, g: 79, b: 113 },
	{ r: 215, g: 86, b: 108 },
	{ r: 219, g: 92, b: 104 },
	{ r: 223, g: 98, b: 99 },
	{ r: 227, g: 104, b: 95 },
	{ r: 231, g: 110, b: 91 },
	{ r: 235, g: 117, b: 86 },
	{ r: 238, g: 123, b: 81 },
	{ r: 241, g: 129, b: 77 },
	{ r: 244, g: 136, b: 73 },
	{ r: 247, g: 144, b: 68 },
	{ r: 249, g: 151, b: 63 },
	{ r: 250, g: 158, b: 59 },
	{ r: 252, g: 165, b: 55 },
	{ r: 253, g: 172, b: 51 },
	{ r: 253, g: 181, b: 46 },
	{ r: 254, g: 189, b: 42 },
	{ r: 253, g: 197, b: 39 },
	{ r: 252, g: 205, b: 37 },
	{ r: 251, g: 215, b: 36 },
	{ r: 248, g: 223, b: 37 },
	{ r: 246, g: 232, b: 38 },
	{ r: 243, g: 240, b: 39 },
	{ r: 240, g: 249, b: 33 },
]

const cubeData = [
	{ r: 131, g: 12, b: 171 },
	{ r: 133, g: 45, b: 206 },
	{ r: 125, g: 74, b: 236 },
	{ r: 110, g: 98, b: 253 },
	{ r: 99, g: 122, b: 250 },
	{ r: 85, g: 144, b: 231 },
	{ r: 71, g: 164, b: 212 },
	{ r: 56, g: 182, b: 185 },
	{ r: 63, g: 194, b: 159 },
	{ r: 72, g: 208, b: 129 },
	{ r: 81, g: 217, b: 101 },
	{ r: 92, g: 227, b: 74 },
	{ r: 116, g: 233, b: 77 },
	{ r: 154, g: 236, b: 84 },
	{ r: 180, g: 236, b: 87 },
	{ r: 204, g: 236, b: 90 },
	{ r: 214, g: 245, b: 90 },
	{ r: 224, g: 255, b: 90 },
]

const turboData = [
	{
		r: 49,
		g: 18,
		b: 59,
	},
	{
		r: 50,
		g: 21,
		b: 67,
	},
	{
		r: 51,
		g: 24,
		b: 74,
	},
	{
		r: 52,
		g: 27,
		b: 82,
	},
	{
		r: 53,
		g: 30,
		b: 89,
	},
	{
		r: 55,
		g: 33,
		b: 96,
	},
	{
		r: 56,
		g: 36,
		b: 102,
	},
	{
		r: 57,
		g: 39,
		b: 109,
	},
	{
		r: 58,
		g: 42,
		b: 115,
	},
	{
		r: 59,
		g: 45,
		b: 122,
	},
	{
		r: 59,
		g: 48,
		b: 128,
	},
	{
		r: 60,
		g: 50,
		b: 134,
	},
	{
		r: 61,
		g: 53,
		b: 140,
	},
	{
		r: 62,
		g: 56,
		b: 146,
	},
	{
		r: 63,
		g: 59,
		b: 151,
	},
	{
		r: 64,
		g: 62,
		b: 157,
	},
	{
		r: 64,
		g: 65,
		b: 162,
	},
	{
		r: 65,
		g: 67,
		b: 167,
	},
	{
		r: 66,
		g: 70,
		b: 172,
	},
	{
		r: 66,
		g: 73,
		b: 177,
	},
	{
		r: 67,
		g: 76,
		b: 182,
	},
	{
		r: 67,
		g: 78,
		b: 187,
	},
	{
		r: 68,
		g: 81,
		b: 191,
	},
	{
		r: 68,
		g: 84,
		b: 196,
	},
	{
		r: 69,
		g: 87,
		b: 200,
	},
	{
		r: 69,
		g: 89,
		b: 204,
	},
	{
		r: 69,
		g: 92,
		b: 208,
	},
	{
		r: 70,
		g: 95,
		b: 212,
	},
	{
		r: 70,
		g: 97,
		b: 215,
	},
	{
		r: 70,
		g: 100,
		b: 219,
	},
	{
		r: 70,
		g: 103,
		b: 222,
	},
	{
		r: 71,
		g: 105,
		b: 225,
	},
	{
		r: 71,
		g: 108,
		b: 228,
	},
	{
		r: 71,
		g: 110,
		b: 231,
	},
	{
		r: 71,
		g: 113,
		b: 234,
	},
	{
		r: 71,
		g: 116,
		b: 236,
	},
	{
		r: 71,
		g: 118,
		b: 239,
	},
	{
		r: 71,
		g: 121,
		b: 241,
	},
	{
		r: 71,
		g: 123,
		b: 243,
	},
	{
		r: 71,
		g: 126,
		b: 245,
	},
	{
		r: 71,
		g: 128,
		b: 247,
	},
	{
		r: 70,
		g: 131,
		b: 249,
	},
	{
		r: 70,
		g: 133,
		b: 251,
	},
	{
		r: 70,
		g: 136,
		b: 252,
	},
	{
		r: 69,
		g: 138,
		b: 253,
	},
	{
		r: 69,
		g: 141,
		b: 254,
	},
	{
		r: 68,
		g: 143,
		b: 255,
	},
	{
		r: 67,
		g: 146,
		b: 255,
	},
	{
		r: 66,
		g: 148,
		b: 256,
	},
	{
		r: 65,
		g: 151,
		b: 256,
	},
	{
		r: 64,
		g: 153,
		b: 256,
	},
	{
		r: 63,
		g: 156,
		b: 255,
	},
	{
		r: 61,
		g: 159,
		b: 255,
	},
	{
		r: 60,
		g: 161,
		b: 254,
	},
	{
		r: 58,
		g: 164,
		b: 253,
	},
	{
		r: 56,
		g: 166,
		b: 252,
	},
	{
		r: 55,
		g: 169,
		b: 251,
	},
	{
		r: 53,
		g: 171,
		b: 249,
	},
	{
		r: 51,
		g: 174,
		b: 248,
	},
	{
		r: 49,
		g: 176,
		b: 246,
	},
	{
		r: 48,
		g: 179,
		b: 244,
	},
	{
		r: 46,
		g: 181,
		b: 243,
	},
	{
		r: 44,
		g: 184,
		b: 241,
	},
	{
		r: 42,
		g: 186,
		b: 238,
	},
	{
		r: 41,
		g: 188,
		b: 236,
	},
	{
		r: 39,
		g: 191,
		b: 234,
	},
	{
		r: 37,
		g: 193,
		b: 232,
	},
	{
		r: 36,
		g: 195,
		b: 229,
	},
	{
		r: 34,
		g: 198,
		b: 227,
	},
	{
		r: 33,
		g: 200,
		b: 224,
	},
	{
		r: 31,
		g: 202,
		b: 222,
	},
	{
		r: 30,
		g: 204,
		b: 219,
	},
	{
		r: 29,
		g: 206,
		b: 216,
	},
	{
		r: 27,
		g: 208,
		b: 214,
	},
	{
		r: 27,
		g: 210,
		b: 211,
	},
	{
		r: 26,
		g: 212,
		b: 208,
	},
	{
		r: 25,
		g: 214,
		b: 206,
	},
	{
		r: 24,
		g: 216,
		b: 203,
	},
	{
		r: 24,
		g: 218,
		b: 200,
	},
	{
		r: 24,
		g: 220,
		b: 198,
	},
	{
		r: 24,
		g: 222,
		b: 195,
	},
	{
		r: 24,
		g: 223,
		b: 193,
	},
	{
		r: 24,
		g: 225,
		b: 190,
	},
	{
		r: 25,
		g: 226,
		b: 188,
	},
	{
		r: 25,
		g: 228,
		b: 185,
	},
	{
		r: 26,
		g: 229,
		b: 183,
	},
	{
		r: 28,
		g: 231,
		b: 181,
	},
	{
		r: 29,
		g: 232,
		b: 178,
	},
	{
		r: 31,
		g: 233,
		b: 176,
	},
	{
		r: 33,
		g: 235,
		b: 173,
	},
	{
		r: 35,
		g: 236,
		b: 170,
	},
	{
		r: 37,
		g: 237,
		b: 168,
	},
	{
		r: 39,
		g: 238,
		b: 165,
	},
	{
		r: 42,
		g: 240,
		b: 162,
	},
	{
		r: 44,
		g: 241,
		b: 159,
	},
	{
		r: 47,
		g: 242,
		b: 155,
	},
	{
		r: 50,
		g: 243,
		b: 152,
	},
	{
		r: 53,
		g: 244,
		b: 149,
	},
	{
		r: 57,
		g: 245,
		b: 146,
	},
	{
		r: 60,
		g: 246,
		b: 142,
	},
	{
		r: 63,
		g: 247,
		b: 139,
	},
	{
		r: 67,
		g: 248,
		b: 136,
	},
	{
		r: 71,
		g: 249,
		b: 132,
	},
	{
		r: 74,
		g: 249,
		b: 129,
	},
	{
		r: 78,
		g: 250,
		b: 125,
	},
	{
		r: 82,
		g: 251,
		b: 122,
	},
	{
		r: 86,
		g: 251,
		b: 119,
	},
	{
		r: 90,
		g: 252,
		b: 115,
	},
	{
		r: 94,
		g: 253,
		b: 112,
	},
	{
		r: 98,
		g: 253,
		b: 109,
	},
	{
		r: 102,
		g: 254,
		b: 105,
	},
	{
		r: 106,
		g: 254,
		b: 102,
	},
	{
		r: 110,
		g: 255,
		b: 99,
	},
	{
		r: 113,
		g: 255,
		b: 96,
	},
	{
		r: 117,
		g: 255,
		b: 93,
	},
	{
		r: 121,
		g: 255,
		b: 90,
	},
	{
		r: 125,
		g: 256,
		b: 87,
	},
	{
		r: 129,
		g: 256,
		b: 84,
	},
	{
		r: 133,
		g: 256,
		b: 81,
	},
	{
		r: 136,
		g: 256,
		b: 78,
	},
	{
		r: 140,
		g: 256,
		b: 76,
	},
	{
		r: 143,
		g: 256,
		b: 73,
	},
	{
		r: 147,
		g: 256,
		b: 71,
	},
	{
		r: 150,
		g: 255,
		b: 69,
	},
	{
		r: 153,
		g: 255,
		b: 67,
	},
	{
		r: 156,
		g: 255,
		b: 65,
	},
	{
		r: 159,
		g: 254,
		b: 63,
	},
	{
		r: 162,
		g: 254,
		b: 61,
	},
	{
		r: 165,
		g: 253,
		b: 60,
	},
	{
		r: 167,
		g: 253,
		b: 58,
	},
	{
		r: 170,
		g: 252,
		b: 57,
	},
	{
		r: 173,
		g: 252,
		b: 56,
	},
	{
		r: 175,
		g: 251,
		b: 55,
	},
	{
		r: 178,
		g: 250,
		b: 55,
	},
	{
		r: 181,
		g: 249,
		b: 54,
	},
	{
		r: 183,
		g: 248,
		b: 53,
	},
	{
		r: 186,
		g: 247,
		b: 53,
	},
	{
		r: 188,
		g: 246,
		b: 52,
	},
	{
		r: 191,
		g: 245,
		b: 52,
	},
	{
		r: 194,
		g: 244,
		b: 52,
	},
	{
		r: 196,
		g: 242,
		b: 52,
	},
	{
		r: 199,
		g: 241,
		b: 52,
	},
	{
		r: 201,
		g: 240,
		b: 52,
	},
	{
		r: 204,
		g: 238,
		b: 52,
	},
	{
		r: 206,
		g: 237,
		b: 52,
	},
	{
		r: 208,
		g: 235,
		b: 53,
	},
	{
		r: 211,
		g: 234,
		b: 53,
	},
	{
		r: 213,
		g: 232,
		b: 53,
	},
	{
		r: 215,
		g: 230,
		b: 54,
	},
	{
		r: 218,
		g: 229,
		b: 54,
	},
	{
		r: 220,
		g: 227,
		b: 54,
	},
	{
		r: 222,
		g: 225,
		b: 55,
	},
	{
		r: 224,
		g: 223,
		b: 55,
	},
	{
		r: 226,
		g: 222,
		b: 56,
	},
	{
		r: 228,
		g: 220,
		b: 56,
	},
	{
		r: 230,
		g: 218,
		b: 56,
	},
	{
		r: 232,
		g: 216,
		b: 57,
	},
	{
		r: 234,
		g: 214,
		b: 57,
	},
	{
		r: 236,
		g: 212,
		b: 57,
	},
	{
		r: 237,
		g: 210,
		b: 58,
	},
	{
		r: 239,
		g: 208,
		b: 58,
	},
	{
		r: 240,
		g: 206,
		b: 58,
	},
	{
		r: 242,
		g: 204,
		b: 58,
	},
	{
		r: 243,
		g: 202,
		b: 58,
	},
	{
		r: 245,
		g: 200,
		b: 58,
	},
	{
		r: 246,
		g: 198,
		b: 58,
	},
	{
		r: 247,
		g: 195,
		b: 58,
	},
	{
		r: 248,
		g: 193,
		b: 58,
	},
	{
		r: 249,
		g: 191,
		b: 58,
	},
	{
		r: 250,
		g: 189,
		b: 57,
	},
	{
		r: 251,
		g: 187,
		b: 57,
	},
	{
		r: 252,
		g: 185,
		b: 56,
	},
	{
		r: 252,
		g: 182,
		b: 55,
	},
	{
		r: 253,
		g: 180,
		b: 55,
	},
	{
		r: 253,
		g: 178,
		b: 54,
	},
	{
		r: 254,
		g: 175,
		b: 53,
	},
	{
		r: 254,
		g: 173,
		b: 52,
	},
	{
		r: 255,
		g: 170,
		b: 51,
	},
	{
		r: 255,
		g: 167,
		b: 50,
	},
	{
		r: 255,
		g: 165,
		b: 49,
	},
	{
		r: 255,
		g: 162,
		b: 48,
	},
	{
		r: 255,
		g: 159,
		b: 47,
	},
	{
		r: 255,
		g: 156,
		b: 46,
	},
	{
		r: 255,
		g: 153,
		b: 44,
	},
	{
		r: 255,
		g: 150,
		b: 43,
	},
	{
		r: 255,
		g: 147,
		b: 42,
	},
	{
		r: 255,
		g: 144,
		b: 41,
	},
	{
		r: 254,
		g: 141,
		b: 39,
	},
	{
		r: 254,
		g: 138,
		b: 38,
	},
	{
		r: 253,
		g: 135,
		b: 37,
	},
	{
		r: 253,
		g: 132,
		b: 36,
	},
	{
		r: 252,
		g: 129,
		b: 34,
	},
	{
		r: 252,
		g: 126,
		b: 33,
	},
	{
		r: 251,
		g: 123,
		b: 32,
	},
	{
		r: 250,
		g: 120,
		b: 30,
	},
	{
		r: 250,
		g: 117,
		b: 29,
	},
	{
		r: 249,
		g: 114,
		b: 28,
	},
	{
		r: 248,
		g: 111,
		b: 26,
	},
	{
		r: 247,
		g: 108,
		b: 25,
	},
	{
		r: 246,
		g: 105,
		b: 24,
	},
	{
		r: 245,
		g: 102,
		b: 23,
	},
	{
		r: 244,
		g: 99,
		b: 21,
	},
	{
		r: 243,
		g: 97,
		b: 20,
	},
	{
		r: 242,
		g: 94,
		b: 19,
	},
	{
		r: 241,
		g: 91,
		b: 18,
	},
	{
		r: 240,
		g: 88,
		b: 17,
	},
	{
		r: 238,
		g: 86,
		b: 16,
	},
	{
		r: 237,
		g: 83,
		b: 15,
	},
	{
		r: 236,
		g: 81,
		b: 14,
	},
	{
		r: 234,
		g: 78,
		b: 13,
	},
	{
		r: 233,
		g: 76,
		b: 12,
	},
	{
		r: 232,
		g: 73,
		b: 12,
	},
	{
		r: 230,
		g: 71,
		b: 11,
	},
	{
		r: 229,
		g: 69,
		b: 10,
	},
	{
		r: 227,
		g: 67,
		b: 10,
	},
	{
		r: 225,
		g: 65,
		b: 9,
	},
	{
		r: 224,
		g: 63,
		b: 8,
	},
	{
		r: 222,
		g: 61,
		b: 8,
	},
	{
		r: 220,
		g: 59,
		b: 7,
	},
	{
		r: 219,
		g: 57,
		b: 7,
	},
	{
		r: 217,
		g: 55,
		b: 6,
	},
	{
		r: 215,
		g: 53,
		b: 6,
	},
	{
		r: 213,
		g: 51,
		b: 5,
	},
	{
		r: 211,
		g: 49,
		b: 5,
	},
	{
		r: 209,
		g: 47,
		b: 5,
	},
	{
		r: 207,
		g: 45,
		b: 4,
	},
	{
		r: 205,
		g: 44,
		b: 4,
	},
	{
		r: 203,
		g: 42,
		b: 4,
	},
	{
		r: 200,
		g: 40,
		b: 3,
	},
	{
		r: 198,
		g: 38,
		b: 3,
	},
	{
		r: 196,
		g: 37,
		b: 3,
	},
	{
		r: 193,
		g: 35,
		b: 2,
	},
	{
		r: 191,
		g: 34,
		b: 2,
	},
	{
		r: 189,
		g: 32,
		b: 2,
	},
	{
		r: 186,
		g: 30,
		b: 2,
	},
	{
		r: 184,
		g: 29,
		b: 2,
	},
	{
		r: 181,
		g: 27,
		b: 1,
	},
	{
		r: 178,
		g: 26,
		b: 1,
	},
	{
		r: 176,
		g: 24,
		b: 1,
	},
	{
		r: 173,
		g: 23,
		b: 1,
	},
	{
		r: 170,
		g: 22,
		b: 1,
	},
	{
		r: 167,
		g: 20,
		b: 1,
	},
	{
		r: 164,
		g: 19,
		b: 1,
	},
	{
		r: 161,
		g: 18,
		b: 1,
	},
	{
		r: 159,
		g: 16,
		b: 1,
	},
	{
		r: 156,
		g: 15,
		b: 1,
	},
	{
		r: 152,
		g: 14,
		b: 1,
	},
	{
		r: 149,
		g: 13,
		b: 1,
	},
	{
		r: 146,
		g: 11,
		b: 1,
	},
	{
		r: 143,
		g: 10,
		b: 1,
	},
	{
		r: 140,
		g: 9,
		b: 2,
	},
	{
		r: 136,
		g: 8,
		b: 2,
	},
	{
		r: 133,
		g: 7,
		b: 2,
	},
	{
		r: 130,
		g: 6,
		b: 2,
	},
	{
		r: 126,
		g: 5,
		b: 2,
	},
	{
		r: 123,
		g: 4,
		b: 3,
	},
]

export function generatePalette(colours, bands) {
	const targetPalette = {
		steps: bands,
		red: [],
		green: [],
		blue: [],
		getColor(val, extent, extendMin = true, extendMax = true) {
			if (val === null) return
			let idx
			if (val > extent[1]) {
				if (extendMax) {
					idx = palette.steps - 1
				} else {
					return
				}
			} else if (val < extent[0]) {
				if (extendMin) {
					idx = 0
				} else {
					return
				}
			} else {
				idx = Math.round(
					((bands - 1 + 0.9999) * (val - extent[0])) / (extent[1] - extent[0])
				)
				if (idx < 0) {
					idx = 0
				}
				if (idx > bands - 1) {
					idx = bands
				}
			}
			return `rgb(${this.red[idx]},${this.green[idx]},${this.blue[idx]})`
		},
	}

	targetPalette.red.push(colours[0].r)
	targetPalette.green.push(colours[0].g)
	targetPalette.blue.push(colours[0].b)
	let lastIndex = 0
	for (let i = 1; i < colours.length; i++) {
		const finalTargetIndex = Math.round(
			((bands - 1) * i) / (colours.length - 1)
		)
		for (let j = lastIndex + 1; j < finalTargetIndex; j++) {
			/*
			 * Work out how much we need from the previous colour
			 * and how much from the new colour
			 */
			const fracFromThis = (j - lastIndex) / (finalTargetIndex - lastIndex)
			const blend = interpolate(colours[i - 1], colours[i], fracFromThis)
			targetPalette.red.push(blend.r)
			targetPalette.green.push(blend.g)
			targetPalette.blue.push(blend.b)
		}
		lastIndex = finalTargetIndex

		targetPalette.red.push(colours[i].r)
		targetPalette.green.push(colours[i].g)
		targetPalette.blue.push(colours[i].b)
	}
	return targetPalette
}

export const plasmaPalette = generatePalette(plasmaData, 255)
export const heatPalette = generatePalette(cubeData, 255)
export const turboPalette = generatePalette(turboData, 255)
export const brGrDivergingPalette = generatePalette(
	[
		{ r: 135, g: 97, b: 69 },
		{ r: 245, g: 245, b: 245 },
		{ r: 69, g: 107, b: 135 },
	],
	255
)
